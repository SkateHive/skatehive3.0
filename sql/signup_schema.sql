-- Skatehive VIP Signup Database Schema
-- Tables for managing VIP codes, signup sessions, and authentication

-- VIP codes table (generated by admin dashboard)
CREATE TABLE IF NOT EXISTS vip_codes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    code VARCHAR(32) UNIQUE NOT NULL,
    created_by VARCHAR(50), -- admin username who created the code
    created_at TIMESTAMPTZ DEFAULT NOW(),
    expires_at TIMESTAMPTZ, -- null means no expiration
    consumed_at TIMESTAMPTZ, -- null means not consumed yet
    consumed_email VARCHAR(255),
    consumed_username VARCHAR(50),
    notes TEXT -- optional notes from admin
);

-- VIP code usage attempts (for logging and analytics)
CREATE TABLE IF NOT EXISTS vip_code_uses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    vip_code_id UUID REFERENCES vip_codes(id) ON DELETE CASCADE,
    signup_session_id UUID, -- references signup_sessions(id)
    email VARCHAR(255) NOT NULL,
    username VARCHAR(50) NOT NULL,
    status VARCHAR(20) NOT NULL, -- 'INIT', 'SUCCESS', 'FAILED'
    error_message TEXT, -- populated if status is 'FAILED'
    attempted_at TIMESTAMPTZ DEFAULT NOW(),
    completed_at TIMESTAMPTZ
);

-- Signup sessions (temporary sessions during signup process)
CREATE TABLE IF NOT EXISTS signup_sessions (
    id UUID PRIMARY KEY, -- this is the signup_token
    vip_code_id UUID REFERENCES vip_codes(id) ON DELETE CASCADE,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(255) NOT NULL,
    status VARCHAR(20) NOT NULL, -- 'INIT', 'SUCCESS', 'FAILED'
    backup_blob JSONB, -- temporarily stores keys for email sending, then nullified
    error_message TEXT, -- populated if status is 'FAILED'
    created_at TIMESTAMPTZ DEFAULT NOW(),
    expires_at TIMESTAMPTZ NOT NULL, -- session expiration (24 hours)
    completed_at TIMESTAMPTZ
);

-- One-time authentication tokens
CREATE TABLE IF NOT EXISTS auth_ott (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    token UUID UNIQUE NOT NULL,
    username VARCHAR(50) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    expires_at TIMESTAMPTZ NOT NULL, -- token expiration (10 minutes)
    consumed_at TIMESTAMPTZ -- null means not consumed yet
);

-- Users table (created after successful signup)
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    hive_account VARCHAR(50) NOT NULL, -- should match username for direct signups
    created_at TIMESTAMPTZ DEFAULT NOW(),
    last_login TIMESTAMPTZ,
    signup_method VARCHAR(20) DEFAULT 'vip_code', -- 'vip_code', 'invite', etc.
    vip_code_used VARCHAR(32), -- reference to the VIP code used
    preferences JSONB DEFAULT '{}' -- user preferences and settings
);

-- Indexes for better performance
CREATE INDEX IF NOT EXISTS idx_vip_codes_code ON vip_codes(code);
CREATE INDEX IF NOT EXISTS idx_vip_codes_consumed ON vip_codes(consumed_at);
CREATE INDEX IF NOT EXISTS idx_vip_code_uses_vip_code_id ON vip_code_uses(vip_code_id);
CREATE INDEX IF NOT EXISTS idx_signup_sessions_status ON signup_sessions(status);
CREATE INDEX IF NOT EXISTS idx_signup_sessions_expires_at ON signup_sessions(expires_at);
CREATE INDEX IF NOT EXISTS idx_auth_ott_token ON auth_ott(token);
CREATE INDEX IF NOT EXISTS idx_auth_ott_expires_at ON auth_ott(expires_at);
CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);

-- Row Level Security (RLS) policies
ALTER TABLE vip_codes ENABLE ROW LEVEL SECURITY;
ALTER TABLE vip_code_uses ENABLE ROW LEVEL SECURITY;
ALTER TABLE signup_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth_ott ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Service role can do everything (for API routes)
CREATE POLICY "Service role can manage vip_codes" ON vip_codes FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');
CREATE POLICY "Service role can manage vip_code_uses" ON vip_code_uses FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');
CREATE POLICY "Service role can manage signup_sessions" ON signup_sessions FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');
CREATE POLICY "Service role can manage auth_ott" ON auth_ott FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');
CREATE POLICY "Service role can manage users" ON users FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');